#version 420 core


in vec4 color;
out vec4 fColor;
in vec3 vNormFrag;
in vec3 vPosFrag;

uniform mat4 VM;
uniform vec3 viewPos;
uniform vec3 lightP;
uniform vec3 lightP2;

uniform mat4 PV;

uniform vec3 Matambient; 
uniform vec3 Matdiffuse;
uniform vec3 Matspecular; 
uniform int shininess;

uniform vec3 Iambient;
uniform vec3 Idiffuse;
uniform vec3 Ispecular;


uniform vec3 Iambient2;
uniform vec3 Idiffuse2;
uniform vec3 Ispecular2;

uniform int Mutplelights;


vec3 calcLight(vec3 lightAmbiance,vec3 lightDiffuse,vec3 lightSpecular, vec3 lightPos)
{
    //diffuse
    vec3 norm = normalize(vNormFrag);
    vec3 vertPos = vec3(VM * vec4(vPosFrag, 1.0));//dis
    vec3 lightDir = normalize(lightPos - vertPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = (diff * Matdiffuse) * lightDiffuse;
    //Specular
    vec3 viewDir = normalize(viewPos - vertPos);
    vec3 reflectDir = 2*dot(lightDir, norm)*norm - lightDir;
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = (Matspecular * spec) * lightSpecular;

    vec3 lighting = (diffuse + specular);
    return lighting;
}


void main(void)
{    

    if(Mutplelights == 2)
    {
        vec3 ambient = Matambient * Iambient;
        vec3 temp = vec3(0.0f);              
        temp += calcLight(Iambient,Idiffuse,Ispecular,lightP);
        temp += calcLight(Iambient2,Idiffuse2,Ispecular2,lightP2);
        temp += ambient;
        fColor = vec4(temp,1.0f);
    }
    else 
    {
        vec3 ambient = Matambient * Iambient;
        vec3 temp = vec3(0.0f);
        temp = calcLight(Iambient,Idiffuse,Ispecular,lightP);
        temp += ambient;
        fColor = vec4(temp,1.0f);
    }
}
